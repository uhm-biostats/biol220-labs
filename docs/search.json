[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Labs for Intro Biostatistics",
    "section": "",
    "text": "Setup",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#software-and-cloud-services",
    "href": "index.html#software-and-cloud-services",
    "title": "Labs for Intro Biostatistics",
    "section": "Software and Cloud Services",
    "text": "Software and Cloud Services\nAll labs will use R, RStudio, and the Koa Server operated by UH Mānoa.\nR is a computer program that allows an extraordinary range of statistical calculations. It is a free program, mainly written by volunteer contributors from around the world.\nRStudio is a separate program, also free, that allows you to easily organize separate tabs for R code files, graphics, help docs, and more.\nFor this course, you won’t need R and RStudio installed on your own device because we will work on the Koa Server. However, if you wish to install them on your device, go to https://rstudio.com/products/rstudio/download/ for instructions about getting set up.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "index.html#using-the-koa-server",
    "href": "index.html#using-the-koa-server",
    "title": "Labs for Intro Biostatistics",
    "section": "Using the Koa Server",
    "text": "Using the Koa Server\nThe Koa Server allows us to run R and RStudio remotely on the servers maintained by UH. Each student has a dedicated folder where all labs (and problem sets) will be posted.\nTo log into the Koa Server visit this url: koa.its.hawaii.edu.\nWhen prompted, login with your UH credentials. Once you are logged in, you will see this landing page:\n\n\n\n\n\n\n\n\n\nClick on the “Interactive Apps” drop-down menu and select RStudio Server\n\n\n\n\n\n\n\n\n\nThis will open up a form where you can select different options for your session working on the Koa Server. Leave all the defaults as is except\n\nenter a reasonable number of hours from 1–4 depending on how long you plan to work in one continuous sitting (if you keep working past the number of hours you entered your session will end, but not to worry, you can just restart it and you won’t lose any work)\nenter 8 GB of RAM (after you set this as 8 the first time, you might not need to re-set it)\n\nOnce you have made your selection for hours and RAM, hit “Launch.”\n\n\n\n\n\n\n\n\n\nYou will have to wait a few seconds for your session to become active. Once it’s ready you will see a button “Connect to RStudio Server.” Click that button and you will be taken to your RStudio session.\n\n\n\n\n\n\n\n\n\nRStudio is arranged into several panels, each with its own purpose. You will learn all about these in “Lab 01: Getting started”. For now, we need to know that the bottom right panel is how we access files and folders on the server. Click on the folder named for our class “biol220_class.”\n\n\n\n\n\n\n\n\n\nThen click “students”\n\n\n\n\n\n\n\n\n\nAnd finally click on the folder named the same as your UH username\n\n\n\n\n\n\n\n\n\nNow the bottom right panel will show you all your lab (and problem set) assignments. As assignments are posted they will appear inside your folder. As an example, check out the “lab_01_getting-started.R” assignment. Clicking on that file will open an R script where you will complete the assignment.\n\n\n\n\n\n\n\n\n\nYou’ll see that the file opens in the top left panel.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "lab01.html",
    "href": "lab01.html",
    "title": "1  Getting started",
    "section": "",
    "text": "1.1 Goals\nAs with all labs, please complete this lab using RStudio running on the UH Koa Server. Access the Koa Server at koa.its.hawaii.edu and use your UH credentials to log in.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab01.html#goals",
    "href": "lab01.html#goals",
    "title": "1  Getting started",
    "section": "",
    "text": "Learning how to start with Koa Server\nUse the command line\nUse functions in R\nUse vectors\nUse data frames",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab01.html#r-rstudio-and-koa-server",
    "href": "lab01.html#r-rstudio-and-koa-server",
    "title": "1  Getting started",
    "section": "1.2 R, RStudio, and Koa Server",
    "text": "1.2 R, RStudio, and Koa Server\n\n1.2.1 What is R?\nR is a computer program that allows an extraordinary range of statistical calculations. It is a free program, mainly written by voluntary contributions from statisticians around the world. R is available on most operating systems, including Windows, Mac OS, and Linux.\nR can make graphics and do statistical calculations. It is also a full-fledged computing language. In this manual, we will only scratch the surface of what R can do.\n\n\n1.2.2 What is RStudio?\nRStudio is a separate program, also free, that provides a more elegant front end for R. RStudio allows you to easily organize separate windows for R commands, graphic, help, etc. in one place.\nFor this course, you won’t need R and RStudio installed on your own device because we will work on the Koa Server. However, if you wish to install them on your device, go to https://rstudio.com/products/rstudio/download/ for instructions about getting set up.\n\n\n1.2.3 What is the Koa Server?\nThe Koa Server allows you to run a hosted version of RStudio in the cloud that allows you to run R without having to download anything on your personal computer or confirgure your personal computer. You access the Koa Server from your browser, and conveniently you can access it from any computer or tablet.\n\n\n1.2.4 Getting started with on the Koa Server\nFollow the instructions on the “Setup” page for setting yourself up on the Koa Server.\nOnce done, proceed with the rest of the lab below.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab01.html#learning-the-tools",
    "href": "lab01.html#learning-the-tools",
    "title": "1  Getting started",
    "section": "1.3 Learning the Tools",
    "text": "1.3 Learning the Tools\nOnce you have launched your RStudio session on the Koa Server you should see a new window with a menu bar at the top and three main panels.\n\n\n\n\n\n\n\n\n\nThe left panel is called the “Console”—this is where you type commands to give instructions to R and typically where you see R’s answers to you.\nThe top right panel can show various different pieces of information. We will not make extensive use of this panel in our class, but you can note that the “Environment” tab in this panel shows all the objects (more on that below) that you have created in your current R session.\nThe bottom left panel, as you already know, shows the folders and files you have access to. You should always make sure you are working in the folder named after your UH username.\nThis bottom left panel is also where help documents will be rendered (in the tab called “Help”) and data visualizations will be shown (in the tab called “Plots”).\nOnce you click on an R script to open it, you Console gets pushed down to the bottom left panel and the script appears in the top left panel.\n\n\n\n\n\n\n\n\n\n\n1.3.1 The Console\nYou can type commands into the Console where there is a prompt (which will look like a &gt; sign at the bottom of the window). The Console has to be the selected window. (Clicking anywhere in the Console selects it.)\nThe &gt; prompt is R’s way of inviting you to give it instructions. You communicate with R by typing commands after the &gt; prompt.\nType “2 + 2” at the &gt; prompt, and hit return. You’ll see that R can work as a calculator (among its many other uses). It will give you the answer 4 and it will label that answer with [1] to indicate that it is the first element in the answer. (This is sort of annoying when the answers are simple like this, but can be very valuable when the answers become more complex and have multiple elements.)\nRemember, you don’t type the &gt; sign. The &gt; is the prompt that R gives saying it is ready for input. We reproduce it here so you can see which is input (in blue) and which is output (in black or red).\n\n2 + 2\n\n[1] 4\n\n\nYou can use a wide variety of math functions to make calculations here, e.g., log() calculates the log of a number:\n\nlog(42)\n\n[1] 3.73767\n\n\n(By default, this gives the natural log with base \\(e\\).)\nParentheses are used both as a way to group elements of the calculation and also as a way to denote the arguments of functions. (The “arguments” of a function are the set of values given to it as input.) For example, log(3) is applying the function log() to the argument 3.\nAnother mathematical function that often comes in handy is the square root function, sqrt(). For example, the square root of 4 is:\n\nsqrt(4)\n\n[1] 2\n\n\nTo calculate a value with an exponent, used the ^ symbol. For example \\(4^3\\) is written as:\n\n4^3\n\n[1] 64\n\n\nNote how R ignores white space when it’s not in quotes (we’ll come back to quotes later):\n\n4^3\n\n[1] 64\n\n4  ^  3\n\n[1] 64\n\n\nOf course, math functions can be combined to give an infinite possibility of mathematical expressions. For example,\n\\[\\frac{1}{\\sqrt{2 \\pi \\times 3.1^2}} e^{-\\frac{(12 - 10.7) ^ 2}{2 \\times 3.1}}\\]\ncan be calculated with\n\n1 / sqrt(2 * pi * 3.1^ 2) * exp(-(12 - 10.7)^2 / (2 * 3.1))\n\n[1] 0.09798692\n\n\nRemember parentheses are used both to pass arguments to functions (like exp(-(12 - 10.7)^2 / (2 * 3.1))) but also to group mathematical operations. For example, the argument passed to exp() is -(12 - 10.7)^2 / (2 * 3.1). We need all those parentheses to make sure the fraction is correctly computed as \\(-\\frac{(12 - 10.7) ^ 2}{2 \\times 3.1}\\). If we didn’t have the parentheses around (12 - 10.7)^2 and instead wrote -12 - 10.7^2 / (2 * 3.1), that would be valid code, but it would calculate an answer to the wrong equation:\n\\[-12 - \\frac{10.7^2}{(2 \\times 3.1)}\\]\n\n\n1.3.2 Saving your code\nWhen you analyze your own data, we strongly recommend that you keep a record of all commands used, along with copious notes, so that weeks or years later you can retrace the steps of your earlier analysis.\nIn RStudio you can create a plain text file (sometimes called a script), which contains R commands that can be reloaded and used at a later date. We create scripts for you for every assignment where you can enter and save your commands.\nWhile you’re “learning the tools” you can copy and paste any commands that you want from the the lab instructions, the Console (do not include the &gt; prompt in the script), or type directly into the script. Save this script for later reference by hitting “Save” under the “File” menu. In the future you can open this file to have those commands available for use again.\nIt is a good habit to type all your commands in the script window and run them from there, rather than typing directly into the console. This lets you save a record of your session so that you can more easily re-create what you have done later.\nFYI, if you want to create a new, blank R script, here’s how: under the menu at the top, choose “File”, then “New File”, and then “R Script”. Follow the prompts to save the new file.\n\n\n1.3.3 Comments\nIn scripts, it can be very useful to save a bit of text which is not to be evaluated by R. You can leave a note to yourself (or a collaborator) about what the next line is supposed to do, what its strengths and limitations are, or anything else you want to remember later. To leave a note, we use “comments”, which are a line of text that starts with the hash symbol #. Anything on a line after a # will be ignored by R.\n\n# This is a comment. Running this in R will \n# have no effect.\n\n\n\n1.3.4 Functions\nMost of the work in R is done by functions. A function has a name and one or more arguments. For example, log(4) is a function that calculates the log in base \\(e\\) for the value 4 given as input.\nSometimes functions have optional input arguments. For the function log(), for example, we can specify the optional input argument base to tell the function what base to use for the logarithm. If we don’t specify the base variable, it has a default value of base = e. To get a log in base 10, for example, we would use:\n\nlog(4, base = 10)\n\n[1] 0.60206\n\n\n\n\n1.3.5 Defining variables\nIn R, we can store information of various sorts by assigning them to variables. For example, if we want to create a variable called x and give it a value of 4, we would write\n\nx &lt;- 4\n\nThe middle bit of this—a less than sign and a hyphen typed together to make something that looks a little like a left-facing arrow – tells R to assign the value on the right to the variable on the left. After running the command above, whenever we use x in a command it would be replaced by its value 4. For example, if we add 3 to x, we would expect to get 7.\n\nx + 3\n\n[1] 7\n\n\nVariables in R can store more than just simple numbers. They can store lists of numbers, functions, graphics, etc., depending on what values get assigned to the variable.\nWe can always reassign a new value to a variable. If we now tell R that x is equal to 32\n\nx &lt;- 32\n\nthen x takes its new value:\n\nx\n\n[1] 32\n\n\n\n\n1.3.6 Names\nNaming variables and functions in R is pretty flexible.\nA name has to start with a letter, but that can be followed by any combination of letters, numbers, and underscores (_). Names cannot have spaces or any character other than letters, numbers, and underscores, for example $, -, and % are not allowed. Technically, periods (.) are allowed in names, but not reccomended excpet for specific uses outside the scope of this course.\nNames in R are case-sensitive, which means that Weights and weights are completely different things to R. This is a common and incredibly frustrating source of errors in R.\nIt’s a good idea to have your names be as descriptive as possible, so that you will know what you meant later on when looking at it. (However, if they get too long, it becomes painful and error prone to type them each time we use them, so this, as with all things, requires moderation.)\nSometimes clear naming means that it is best to have multiple words in the name, but we can’t have spaces. Therefore a common approach is like we saw in the previous section, to chain the words with underscores (not hyphens!), as in weights_before_hospital. (Another solution to make separate words stand out in a variable name is to vary the case: weightsBeforeHospital. This is called “Camel Case” because the capital letters are like camel humps.)\n\n\n1.3.7 Vectors\nOne useful feature of R is the ability to apply functions to an entire collection of numbers. The technical term for a set of numbers is “vector”. For example, the following code will create a vector of six numbers:\n\n c(78, 85, 64, 54, 102, 98.6)\n\n[1]  78.0  85.0  64.0  54.0 102.0  98.6\n\n\nc() is a function that creates a vector, containing the items given in its arguments. To help you remember, you could think of the function c() meaning to “combine” some elements into a vector.\nLet’s add a little extra here to make the computer remember this vector. Let’s assign it to a variable, called temperatureF (because these numbers are actually a set of temperatures in degrees Fahrenheit):\n\ntemperatureF &lt;- c(78, 85, 64, 54, 102, 98.6)\n\nThe combination of the less than sign and the hyphen makes an arrow pointing from right to left—this tells R to assign the stuff on the right to the name on the left. In this case we are assigning a vector to the variable temperatureF.\nInputting this into R causes no obvious output, but R will now remember this vector of temperatures under the name temperatureF. We can view the contents of the vector temperatureF by simply typing its name:\n\ntemperatureF\n\n[1]  78.0  85.0  64.0  54.0 102.0  98.6\n\n\nThe power of vectors is that R can do the same calculation on all elements of a vector with one command. For example, to convert a temperature in Fahrenheit to Celsius, we would want to subtract 32 and multiply times 5/9. We can do that for all the numbers in this vector at once:\n\ntemperatureC &lt;- (temperatureF - 32) * 5 / 9\ntemperatureC\n\n[1] 25.55556 29.44444 17.77778 12.22222 38.88889 37.00000\n\n\nTo pull out one of the numbers in this vector, we add square brackets after the vector name, and inside those brackets put the index of the element we want. (The “index” is just a number giving the location in the vector of the item we want. The first item has index 1, etc.) For example, the second element of the vector temperatureC is\n\ntemperatureC[2]\n\n[1] 29.44444\n\n\nOne of the ways to slip up in R is to confuse the [square brackets] which pull out an element of a vector, with the (parentheses), which is used to enclose the arguments of a function.\nVectors can also operate mathematically with other vectors. For example, imagine you have a vector of the body weights of patients before entering hospital (weight_before_hospital) and another vector with the same patient’s weights after leaving hospital (weight_after_hospital). You can calculate the change in weight for all these patients in one command, using vector subtraction:\n\nweight_before_hospital &lt;- c(100, 102)\nweight_after_hospital &lt;- c(98, 99)\n\nweight_change_during_hospital &lt;- weight_before_hospital - weight_after_hospital\n\nThe result will be a vector that has each patient’s change in weight.\n\n\n1.3.8 Basic calculation examples\nIn this course, we’ll learn how to use a few dozen functions, but let’s start with a couple of basic ones.\nThe function mean() does just what it sounds like: it calculates the sample mean (that is, the average) of the vector given to it as input. For example, the mean of the vector of the temperatures in degrees Celsius from above is 26.81481:\n\nmean(temperatureC)\n\n[1] 26.81481\n\n\nAnother simple (and simply named) function calculates the sum of all numbers in a vector: sum().\n\nsum(temperatureC)\n\n[1] 160.8889\n\n\nTo count the number of elements in a vector, use length().\n\nlength(temperatureC)\n\n[1] 6\n\n\nThis shows that there are 6 temperature values in the vector that make up the vector temperatureC.\n\n\n1.3.9 Reading a data file\nIn this course, we have saved the data in a “comma-separated variable” format. All files in this format ought to have “.csv” as the end of their file name. A CSV file is a plain text file, easily read by a wide variety of programs. Each row in the file (besides the first row) is the data for a given individual, and for each individual each variable is listed in the same order, separated by commas. It’s important to note that you can’t have commas anywhere else in the file, besides the separators.\nThe first row of a CSV file should be a “header” row, which gives the names of each variable, again separated by commas.\nFor examples in this tutorial, let’s use a data set about the passengers of the RMS Titanic. One of the data sets in the folder of data attached to this lab is called “titanic.csv”. This is a data set of 1313 passengers from the voyage of this ship, which contains information about some personal info about each passenger as well as whether they survived the accident or not.\nTo import a CSV file into R, use the read.csv() function as in the following command. The long string in the quotes is how we tell R where to find the file we want to read in. Note: you will need to replace &lt;username&gt; with your actual UH username, for example I would replace &lt;username&gt; with rominger. In this case, the file is in the data folder, itself in the student’s &lt;username folder, itself in the biol220_class folder. All data we use will be found in the data folder at this location.\n\ntitanic_data &lt;- read.csv(\"biol220_class/students/&lt;username&gt;/data/titanic.csv\")\n\nHere we have given the name titanic_data to the object in R that contains all this passenger data. Of course, if you wanted to load a different data set, you would be better off giving it a more apt name than “titanic_data”.\nTo see if the data loads appropriately, you might want to run the command\n\nsummary(titanic_data)\n\n passenger_class        name                age            embarked        \n Length:1313        Length:1313        Min.   : 0.1667   Length:1313       \n Class :character   Class :character   1st Qu.:21.0000   Class :character  \n Mode  :character   Mode  :character   Median :30.0000   Mode  :character  \n                                       Mean   :31.1942                     \n                                       3rd Qu.:41.0000                     \n                                       Max.   :71.0000                     \n                                       NA's   :680                         \n home_destination       sex              survive         \n Length:1313        Length:1313        Length:1313       \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                                                         \n\n\nwhich will list all the variables and some summary statistics for each variable.\n\n\n1.3.10 Intro to data frames\nA data frame is a way that R can store a data set on a number of individuals. A data frame is a collection of columns; each column contains the values of a single variable for all individuals. The values of each individual occur in the same order in all the columns, so the first value for one variable represents the same individual as the first value in the lists of all other variables.\nThe function read.csv() loads the data it reads into a data frame.\nThe data frame is usually given a name, which is used to tell R’s functions which data set to use. For example, in the previous section we read in a data set to a data frame that we called titanic_data. This data frame now contains information about each of the passengers on the Titanic. This data frame has seven variables, so it has seven columns (passenger_class, name, age, embarked, home_destination, sex, and survive).\nVery importantly, we can grab one of the columns from a data frame by itself. We write the name of the data frame, followed by a $, and then the name of the variable.\nFor example, to show a list of the age of all the passengers on the Titanic, use\n\ntitanic_data$age\n\nThis will show a vector that has the values for this variable age, one for each individual in the data set.\nNote, when looking at long vectors or data frames, it’s convenient to use the head function, which only shows the first 6 elements, not the whole huge vector or data frame.\n\nhead(titanic_data$age)\n\n[1] 29.0000  2.0000 30.0000 25.0000  0.9167 47.0000\n\n\n\n\n1.3.11 Adding a new column\nSometimes we would like to add a new column to a data frame. The easiest way to do this is to simply assign a new vector to a new column name, using the $.\nFor example, to add the log of age as a column in the titanic_data data frame, we can write\n\ntitanic_data$log_age &lt;- log(titanic_data$age)\n\nYou can run the command head(titanic_data) to see that log_age is now a column in titanic_data.\n\n\n1.3.12 Choosing subsets of data\nSometimes we want to do an analysis only on some of the data that fit certain criteria. For example, we might want to analyze the data from the Titanic using only the information from females. The easiest way to do this is to use the subset function.\nIn the titanic data set there is a variable named sex. We can create a new data frame that includes only the data from passengers recorded as female with the following command:\n\ntitanic_female_data &lt;- subset(titanic_data, sex == \"female\")\nhead(titanic_female_data)\n\n   passenger_class                                       name age    embarked\n1              1st                  Allen,MissElisabethWalton  29 Southampton\n2              1st                   Allison,MissHelenLoraine   2 Southampton\n4              1st  Allison,MrsHudsonJ.C.(BessieWaldoDaniels)  25 Southampton\n7              1st              Andrews,MissKorneliaTheodosia  63 Southampton\n9              1st    Appleton,MrsEdwardDale(CharlotteLamson)  58 Southampton\n12             1st Astor,MrsJohnJacob(MadeleineTalmadgeForce)  19   Cherbourg\n              home_destination    sex survive   log_age\n1                   StLouis,MO female     yes 3.3672958\n2  Montreal,PQ/Chesterville,ON female      no 0.6931472\n4  Montreal,PQ/Chesterville,ON female      no 3.2188758\n7                    Hudson,NY female     yes 4.1431347\n9            Bayside,Queens,NY female     yes 4.0604430\n12                  NewYork,NY female     yes 2.9444390\n\n\nThis new data fame will include all the same columns as the original titanic_data, but it will only include the rows for which the sex was “female”.\nNote that the syntax here requires a double == sign. In R (and many other computer languages), the double equal sign creates a statement that can be evaluated as TRUE or FALSE. Here we are asking, for each individual, whether sex is “female”.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab01.html#questions-for-lab-report",
    "href": "lab01.html#questions-for-lab-report",
    "title": "1  Getting started",
    "section": "1.4 Questions for Lab Report",
    "text": "1.4 Questions for Lab Report\nYour lab report is due before the start of next week’s lab. When you’re finished, save it, export it, and upload it to Google Classroom to turn in the assignment.\nTo export your script from the RStudio session running on the Koa Server, select the radio button next to the script name.\n\n\n\n\n\n\n\n\n\nThen click the gear icon titled “More” and from the drop-down menu select “Export.”\n\n\n\n\n\n\n\n\n\nWhen prompted click “Download” and then save the script somewhere on your device. Once downloaded on your device, you can upload to Google Classroom.\nTo answer each of the questions below, in your script lab_01-getting-started.R write the question number as a comment, followed by any R code you use to answer the question, and give the answers as comments. It might look something like this:\n\n# Questions\n\n# 1. I followed directions to set up my lab report\n\n# 2. Yes, I got the same answers!\n\n# 3. Only text answers, no code\n# Answer part 1\n# Answer part 2\n\n# 4. Text and code\n# a.\nx &lt;- c(1, 2, 3) # you can also comment like this\n\n# b.\nmean(x)\n\n# The mean of c(1, 2, 3) is 2. Here's what that means...\n\n\nRun the Learning the tools commands in R from your “scratch.R” script. Did you get the same answers as shown in the text? (Answer “yes”, “no”, or a more detailed explanation. You don’t need to re-run all the code and output here.)\nFor each of the following, come up with a variable name that would be appropriate to use in R for the listed variable:\n\n\n\n\nVariable\nName in R\n\n\n\n\nBody temperature in Celsius\n\n\n\nHow much aspirin is given per dose for a patient\n\n\n\nNumber of televisions per person\n\n\n\nHeight (including neck and extended legs) of giraffes\n\n\n\n\n\nUse R to calculate:\n\n\\(15 \\times 17\\)\n\\(13^3\\)\n\\(\\text{log}_e(14)\\) (natural log)\n\\(\\text{log}_{10}(100)\\) (base 10 log)\n\\(\\sqrt{81}\\)\n\nWeddell seals live in Antarctic waters and take long strenuous dives in order to find fish to feed upon. Researchers (Williams et al. 2004) wanted to know whether these feeding dives were more energetically expensive than regular dives (perhaps because they are deeper, or the seal has to swim further or faster). They measured the metabolic costs of dives using the oxygen consumption of 10 animals (in ml O\\(_2\\) / kg) during a feeding dive. Here are the data:\n\n71.0, 77.3, 82.6, 96.1, 106.6, 112.8, 121.2, 126.4, 127.5, 143.1\n\nFor the same 10 animals, they also measured the oxygen consumption in non-feeding dives. With the 10 animals in the same order as before, here are those data:\n\n42.2, 51.7, 59.8, 66.5, 81.9, 82.0, 81.3, 81.3, 96.0, 104.1\n\n\nMake a vector for each of these lists, and give them appropriate names.\nConfirm (using R) that both of your vectors have the same number of individuals in them.\nCreate a vector called metabolism_difference by calculating the difference in oxygen consumption between feeding dives and nonfeeding dives for each animal.\nWhat is the average difference between feeding dives and nonfeeding dives in oxygen consumption?\nThe arithmetic mean is calculated by adding up all the numbers and dividing by how many numbers there are. Calculate the mean of these numbers using sum() and length(). Did you get the same answer as with using mean()?\nAnother appropriate way to represent the relationship between these two numbers would be to take the ratio of O\\(_2\\) consumption for feeding dives over the O\\(_2\\) consumption of nonfeeding dives. Make a vector which gives this ratio for each seal.\nSometimes ratios are easier to analyze when we look at the log of the ratio. Create a vector which gives the log of the ratios from the previous step. (Use the natural log.) What is the mean of this log-ratio?\n\nThe data file called “countries.csv” in the data folder contains information about all the countries on Earth1. Each row is a country, and each column contains a variable.\n\nUse read.csv() to read the data from this file into a data frame called countries.\nUse summary() to get a quick description of this data set. What are the first three variables?\nUsing the output of summary(), how many countries are from Africa in this data set?\nWhat kinds of variables (i.e., categorical or numerical) are continents, cell_phone_subscriptions_per_100_people_2012, total_population_in_thousands_2015, and fines_for_tobacco_advertising_2014? (Don’t go by their variable names – look at the data in the summary results to decide.)\nAdd a new column to your countries data frame that has the difference in ecological footprint between 2012 and 2000. What is the mean of this difference? (Note: this variable will have “missing data”, which means that some of the countries do not have data in this file for one or the other of the years of ecological footprint. By default, R doesn’t calculate a mean unless all the data are present. To tell R to ignore the missing data, add an option to the mean() command that says na.rm=TRUE. We’ll learn more about this later.)\n\nUsing the countries data again, create a new data frame called africa_data, that only includes data for countries in Africa. What is the sum of the total_population_in_thousands_2015 for this new data frame?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab01.html#footnotes",
    "href": "lab01.html#footnotes",
    "title": "1  Getting started",
    "section": "",
    "text": "These data mainly come from the World Health Organization, but the Continent list comes from https://datahub.io/ and the ecological footprint and cell phone data come from http://www.nationmaster.com.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "lab02.html",
    "href": "lab02.html",
    "title": "2  Graphics in R",
    "section": "",
    "text": "2.1 Goals\nAs with all labs, please complete this lab using RStudio running on the UH Koa Server. Access the Koa Server at koa.its.hawaii.edu and use your UH credentials to log in. If needed, refer back to “Setup” and “Lab 1” for instructions on access, setting up your account, and how to turn in your lab report.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Graphics in R</span>"
    ]
  },
  {
    "objectID": "lab02.html#goals",
    "href": "lab02.html#goals",
    "title": "2  Graphics in R",
    "section": "",
    "text": "Know how to load packages to expand the capabilities of R\nKnow some basic graphical formats and when they are useful\nMake graphs in R, such as histograms, bar charts, box plots, and scatter plots\nBe able to suggest improvements to basic graphs to improve readability and accurate communication",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Graphics in R</span>"
    ]
  },
  {
    "objectID": "lab02.html#learning-the-tools",
    "href": "lab02.html#learning-the-tools",
    "title": "2  Graphics in R",
    "section": "2.2 Learning the Tools",
    "text": "2.2 Learning the Tools\n\n2.2.1 Extending R’s capabilities with packages\nR has a lot of power in its basic form, but one of the most important parts about R is that it is expandable by the work of other people. These expansions are usually released in “packages”.\nEach package needs to be installed on your computer only once, but to be used it has to be loaded into R during each session.\nTo install a package in RStudio, click on the packages tab from the sub-window with tables for Files, Plots, Packages, Help, and Viewer. Immediately below that will be a button labeled “Install” – click that and a window will open.\n\nIn the second row (labeled “Packages”), type ggplot2. Make sure the box for “Install dependencies” near the bottom is clicked, and then click the “Install” button at bottom right. This will install the graphics package ggplot2.\n\nAlternatively, you can also use a function to install packages:\n\ninstall.packages(\"ggplot2\")\n\nInstalled packages will be available for future work sessions on Koa Server without needing to go through the installation process again. This is also true when using your own computer. But you will need to re-install packages after software updates.\n\n\n2.2.2 Loading a package\nOnce a package is installed, it needs to be loaded into R during a session if you want to use it. You do this with the function called library().\n\nlibrary(ggplot2)\n\nNow we can start making graphics with the ggplot2 package.\n\n\n2.2.3 ggplot\nWhile base R has ample graphic capabilities, functions from the ggplot2 package are becoming the de facto standard for scientific graphics because they allow more easy customization of plots.\nTo make a graph with ggplot2, you need to specify at least two elements in your command. The first uses the function ggplot itself, to specify which data frame you want to visualize and also which variables are to be plotted. The second part tells R what kind of graph to make, using a geom function. The odd part is that these two parts are put together with a + sign. It’s simplest to see this with an example. We’ll draw a histogram with ggplot in the next section.\n\n\n2.2.4 Histograms\nUseful when:\n\nResponse variable is numerical\n\nA histogram represents the frequency distribution of a numerical variable in a sample.\nLet’s see how to make a basic histogram using the age data from the Titanic data set. Make sure you have loaded the data (using read.csv()) into a data frame called titanic_data.\n\ntitanic_data &lt;- read.csv(\"biol220_class/students/rominger/data/titanic.csv\")\n\nHere’s the ggplot2 code to make a simple histogram of age:\n\nggplot(titanic_data, aes(x = age)) + \n    geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nNotice that there are two functions called here, put together in a single command with a + sign. You don’t have to put a line break after the + (R ignores it), but it makes the code more readable. The first function is ggplot, and it has two input arguments. The first is titanic_data, this is the name of the data frame containing the variables that we want to graph. The second input to ggplot is an aes function. In this case, the aes function tells R that we want Age to be the \\(x\\)-variable (i.e. the variable that is displayed along the \\(x\\)-axis). The “aes” stands for “aesthetics”.\nThe second function in this command is geom_histogram(). This is the part that tells R that the “geometry” of our plot should be a histogram.\nRunning this should give a plot that look something like this:\n\n\n\n\n\n\n\n\n\nThis is not the most beautiful graph in the world, but it conveys the information. At the end of this tutorial we’ll see a couple of options that can make a ggplot graph look a little better.\n\n\n2.2.5 Bar graphs\nUseful when:\n\nResponse variable is categorical\n\nA bar graph plots the frequency distribution of a categorical variable. With ggplot, the syntax for a bar graph is very similar to that for a histogram. For example, here is a bar graph for the categorical variable sex in the titanic data set:\n\nggplot(titanic_data, aes(x = sex)) + \n  geom_bar(stat = \"count\")\n\nAside from specifying a different variable for \\(x\\) in the aes function, we use a different geom function here, geom_bar, and specify the statistic we want to draw, which is the count (or frequency) of the different categories. The result should look like this:\n\n\n\n\n\n\n\n\n\n\n\n2.2.6 Boxplots\nUseful when:\n\nExplanatory variable is categorical\nResponse variable is numerical\n\nA boxplot is a convenient way of showing the distribution of a numerical variable in multiple groups. Here’s the code to draw a boxplot for age in the titanic data set, separately for each recorded sex:\n\nggplot(titanic_data, aes(x = sex, y = age)) + \n    geom_boxplot()\n\nNotice that the \\(y\\) variable here is age, and \\(x\\) is the categorical variable sex that goes on the \\(x\\)-axis. The other new feature here is the new geom function, geom_boxplot().\n\n\n\n\n\n\n\n\n\nHere the thick bar in the middle of each boxplot is the median of that group. The upper and lower bounds of the box extend from the first to the third quartile. The vertical lines are called whiskers, and they cover most of the range of the data (except when data points are pretty far from the median, then they are plotted as individual dots, as on the male boxplot).\n\n\n2.2.7 Scatterplots\nUseful when:\n\nExplanatory variable is numerical\nResponse variable is numerical\n\nScatterplots shows the relationship between two numerical variables.\nThe titanic data set does not have two numerical variables, so let’s use a different data set. We will plot the relationship between sea surface temperature and species richness of reef fishes as compiled by Barneche et. al (2019). These data come from many different published fish surveys conducted by many different researchers all around the world. Barneche and colleagues compiled those data to try to understand what environmental variables predict the species richness of reef fish. Let’s find out!\nYou can load the data with:\n\nreef_fish &lt;- read.csv(\"data/global-reef-fish.csv\")\n\nTo make a scatter plot of the variables temp_C and spp_richness with ggplot, you need to specify the \\(x\\) and \\(y\\) variables, and use geom_point():\n\n# Side note:  I've added a line break between arguments in ggplot()\n# This has no effect on the code, but makes it easier to read IMO\nggplot(reef_fish, \n       aes(x = temp_C, y = spp_richness)) +\n    geom_point()\n\nThe result look like this:\n\n\n\n\n\n\n\n\n\n\n\n2.2.8 Better looking graphics with options\nThe code we have listed here for graphics barely scratches the surface of what ggplot2, and R as a whole, are capable of. Not only are there far more choices about the kinds of plots available, but there are many, many options for customizing the look and feel of each graph. You can choose the font, the font size, the colors, the style of the axes labels, etc., and you can customize the legends and axes legends nearly as much as you want.\nLet’s dig a little deeper into just a couple of options that you can add to any of the forgoing graphs to make them look a little better. For example, you can change the text of the \\(x\\)-axis label or the \\(y\\)-axis label by using xlab() or ylab(). Let’s do that for the scatterplot, to make the labels a little nicer to read for humans.\n\nggplot(reef_fish, \n       aes(x = temp_C, y = spp_richness)) +\n    geom_point() +\n    xlab(\"Temperature (degrees C)\") +\n    ylab(\"Species richness\")\n\nThe labels that we want to add are included in quotes inside the xlab() and ylab() functions. Here is what appears:\n\n\n\n\n\n\n\n\n\nIt can also be nice to remove the default gray background, to make what some feel is a cleaner graph. Try adding\n\n+ theme_minimal()\n\nto the end of one of your lines of code making a graph, to see whether you prefer the result compared to the default design.\n\n\n2.2.9 Color palettes\nIt is important to use a palette that will be clear to color blind individuals and, in some cases, to those who view a printed version in greyscale. There are bewildering array of options, but the viridis palettes accomplish these goals well (read more here). We’ll revisit the histogram example above and view the age distribution on the Titanic by sex (multiple histogram). This is a bit more advanced than what we’ve covered so far, but hang in there. We’ll go step-by-step.\nThe cool thing about ggplot2 is we can assign a large number of graphical features (size, color, fill, shape, line type, etc.) to variables on our data. We’ll do that using the fill = ... argument in the aes() function to make the fill of the bars dependent on sex.\n\nggplot(titanic_data, aes(x = age, fill = sex)) +\n    geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nThat works, but it’s pretty ugly. For one thing, the bars are stacked on top of one another, so it’s hard to see the separate histograms for males and females. We’ll fix that by using the position = ... argument in the geom_histogram() function like this:\n\nggplot(titanic_data, aes(x = age, fill = sex)) +\n    # I will interleave comments to explain what's going on\n    # position = position_identity() stops the bars from stacking\n    geom_histogram(position = position_identity())\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nWell, that’s worse! Now the male bars are blocking the female bars. Let’s add a couple more arguments, making the color 50% transparent using the alpha = ... argument. I’ll also make the color around the bars black so we can see them better.\n\nggplot(titanic_data, aes(x = age, fill = sex)) +\n    # alpha = 0.5 makes bars transparent\n    # color = \"black\" adds black lines around bars\n    geom_histogram(alpha = 0.5, color = \"black\", \n                   position = position_identity())\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nBetter, but not great. Let’s use the facet_grid() function to put the histograms on separate panels. For this, we have to put sex in quotes (learning when things need to be quoted or not is frustrating).\n\nggplot(titanic_data, aes(x = age, fill = sex)) +\n    # facet_grid() makes separate panels for each sex\n    facet_grid(rows = \"sex\") +\n    geom_histogram(alpha = 0.5, color = \"black\", \n                   position = position_identity())\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nPretty good. Now, let’s finally add the viridis color palette. ggplot2 has some built in functions that you can just add using the + operator to change the color, like this:\n\nggplot(titanic_data, aes(x = age, fill = sex)) +\n    facet_grid(rows = \"sex\") +\n    geom_histogram(alpha = 0.5, color = \"black\", \n                   position = position_identity()) +\n    # This function changes the color palette\n    scale_fill_viridis_d()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 680 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\n\n\n2.2.10 Getting help\nThe help pages in R are the main source of help, but the amount of detail might be off-putting for beginners. For example, to explore the options for ggplot(), enter the following into the R Console.\n\nhelp(ggplot)\n\n# you can also use\n?ggplot\n\nThis will cause the contents of the manual page for this function to appear in the Help window in RStudio Cloud. These manual pages are often frustratingly technical. An additional aid is to simply google the name of the function—there are a great number of resources online about R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Graphics in R</span>"
    ]
  },
  {
    "objectID": "lab02.html#questions",
    "href": "lab02.html#questions",
    "title": "2  Graphics in R",
    "section": "2.3 Questions",
    "text": "2.3 Questions\n\nUse the data from “countries.csv” to practice making some graphs.\n\nRead the data from the file “countries.csv” in the “data” folder. (Hint: we did this in the last lab - you need to use read.csv(), use the correct path, and give the object a name.)\nMake sure that you have run library(ggplot2). Why is this necessary for the remainder of this question?\nMake a histogram to show the frequency distribution of values for measles_immunization_oneyearolds, a numerical variable. (This variable gives the percentage of 1-year-olds that have been vaccinated against measles.) Describe the pattern that you see.\nMake a bar graph to show the numbers of countries in each of the continents. (The categorical variable continent indicates the continent to which countries belong.)\nDraw a scatterplot that shows the relationship between the two numerical variables life_expectancy_at_birth_male and life_expectancy_at_birth_female.\n\nThe ecological footprint is a widely-used measure of the impact a person has on the planet. It measures the area of land (in hectares) required to generate the food, shelter, and other resources used by a typical person and required to dispose of that person’s wastes. Larger values of the ecological footprint indicate that the typical person from that country uses more resources.\nThe countries data set has two variables showing the ecological footprint of an average person in each country. ecological_footprint_2000 and ecological_footprint_2012 show the ecological footprints for the years 2000 and 2012, respectively.\n\nPlot the relationship between the ecological footprint of 2000 and of 2012.\nDescribe the relationship between the footprints for the two years. Does the value of ecological footprint of 2000 seem to predict anything about its value in 2012?\nFrom this graph, does the ecological footprint tend to go up or down in the years between 2000 and 2012? Did the countries with high or low ecological footprint change the most over this time? (Hint: you can add a one-to-one line to your graph by adding + geom_abline(intercept = 0, slope = 1) to your ggplot() command. This will make it easier to see when your points are above or below the line of equivalence.)\n\nPlotting categorical and numerical variables: use the countries data again. Plot the relationship between continent and female life expectancy at birth. Describe the patterns that you see.\nMuchala (2006) measured the length of the tongues of eleven different species of South American bats, as well as the length of their palates (to get an indication of the size of their mouths). All of these bats use their tongues to feed on nectar from flowers. Data from the article are given in the file “BatTongues.csv”. In this file, both Tongue Length and Palette Length are given in millimeters. Each value for tongue length and palate length is a species mean, calculated from a sample of individuals per species.\n\nImport the data and inspect it using summary(). You can call the data set whatever you like, but in one of the later steps we’ll assume it is called bat_tongues.\nDraw a scatter plot to show the association between palate length and tongue length, with tongue length as the response variable. Describe the association: is it positive or negative? Is it strong or weak?\nAll of the data points that went into this graph have been double checked and verified. With that in mind, what conclusion can you draw from the outlier on the scatterplot?\nLet’s figure out which species is the outlier. To do this, we’ll use the subset function from Lab 1. Remember, the function subset gives us the row (or rows) of a data frame that has a certain property. Looking at the graph, we can tell that the point we are interested in has a very long tongue_length, at least over 80 mm long! Use subset to figure out the species name of this unusually long-tongued bat.\nThe unusual species is Anoura fistulata (See a photo here). This species has an outrageously long tongue, which it uses to collect nectar from a particular flower (can you guess what feature of the flower has led to the evolution of such a long tongue?). See the article by Muchala (2006) to learn more about the biology of this strange bat.\n\nImprove your figure! Pick one of the plots you made using R today. What could be improved about this graph to make it a more effective presentation of the data?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Graphics in R</span>"
    ]
  },
  {
    "objectID": "lab03.html",
    "href": "lab03.html",
    "title": "3  The Sampling Distribution",
    "section": "",
    "text": "3.1 Goals",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Sampling Distribution</span>"
    ]
  },
  {
    "objectID": "lab03.html#goals",
    "href": "lab03.html#goals",
    "title": "3  The Sampling Distribution",
    "section": "",
    "text": "Understand the sampling distribution of an estimate\nInvestigate sampling error\nCalculate standard error of the mean\nCalculate confidence intervals",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Sampling Distribution</span>"
    ]
  },
  {
    "objectID": "lab03.html#learning-the-tools",
    "href": "lab03.html#learning-the-tools",
    "title": "3  The Sampling Distribution",
    "section": "3.2 Learning the Tools",
    "text": "3.2 Learning the Tools\n\n3.2.1 Simulating your own sampling distributions\nFor this lab we will simulate our own sampling distribution of the mean. Here we will use the penguins dataset from the palmerpenguins package. To simulate the sampling distribution you’ll treat the data in the penguins dataset as the entire population (it isn’t but we can pretend) and take many random samples from it, calculate the sample mean \\(\\bar{Y}\\) for each, and plot the distribution.\n\n3.2.1.1 Randomly sampling rows\nThe dplyr package offers tools that allow us to easily produce a random sample of rows from a dataset using the function slice_sample(). You may need to install the dplyr package, refer back to Lab 02 for how to do that. With the slice_sample() function we can, for example, sample 5 rows at random from the penguins data set by doing the following:\n\nlibrary(dplyr)\n\nsamp &lt;- slice_sample(penguins, n = 5)\nsamp\n\n  species    island bill_len bill_dep flipper_len body_mass    sex year\n1  Adelie     Dream     40.7     17.0         190      3725   male 2009\n2  Adelie Torgersen     37.2     19.4         184      3900   male 2008\n3  Gentoo    Biscoe     48.4     14.4         203      4625 female 2009\n4  Gentoo    Biscoe     59.6     17.0         230      6050   male 2007\n5  Gentoo    Biscoe     43.4     14.4         218      4600 female 2009\n\n\nNow try on your to increase the sample size 10, how would you do this?\n\n\n3.2.1.2 Repeated sampling\nTo simulate a sampling distribution, we need to repeatedly randomly sample the “population” (again, in this case, we’re pretending the penguins data set is the entire population). The infer package (again you may need to install this pacakge following direction sin Lab 02) has a convenient function rep_slice_sample() that will repeat slice_sample() many times. It creates a new column called replicate to index each replicate sample. To randomly sample 5 rows 4 times from the species Adelie, we do:\n\n# first load needed packages\nlibrary(palmerpenguins)\nlibrary(infer)\n\n# let's look at just the species setosa, so we'll need to subset our data\njust_adelie &lt;- subset(penguins, species == \"Adelie\")\n\nmany_adelie_samp &lt;- rep_slice_sample(just_adelie, n = 5, reps = 4)\nhead(many_adelie_samp)\n\n# A tibble: 6 × 9\n# Groups:   replicate [2]\n  replicate species island    bill_length_mm bill_depth_mm flipper_length_mm\n      &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n1         1 Adelie  Dream               39.5          17.8               188\n2         1 Adelie  Torgersen           41.1          18.6               189\n3         1 Adelie  Biscoe              41            20                 203\n4         1 Adelie  Torgersen           35.1          19.4               193\n5         1 Adelie  Torgersen           39.7          18.4               190\n6         2 Adelie  Dream               40.8          18.9               208\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNote: the infer package converted the penguins data.frame to something called a tibble, for our purposes, think of a data.frame and a tibble as equivalent.\nNow, let’s take 1000 samples of size 10 from each species. I’ll show you the code for Adelie, then fill in the blank (___) sections below to do it for the other species. After, you’ll need to combine the results before summarizing and plotting.\n\n# let's use `set.seed` so we can compare answers\nset.seed(123)\n\njust_adelie &lt;- subset(penguins, species == \"Adelie\")\nmany_adelie_samp10 &lt;- rep_slice_sample(just_adelie, n = 10, reps = 1000)\n\njust_chinstrap &lt;- subset(penguins, species == ___)\nmany_chinstrap_samp10 &lt;- rep_slice_sample(___, n = 10, reps = 1000)\n\njust_gentoo &lt;- subset(penguins, species == ___)\nmany_gentoo_samp10 &lt;- rep_slice_sample(___, n = 10, reps = 1000)\n\nIf you used the same seed (123) in the above code then you should get these same answers:\n\nmany_adelie_samp10\n\n# A tibble: 10,000 × 9\n# Groups:   replicate [1,000]\n   replicate species island    bill_length_mm bill_depth_mm flipper_length_mm\n       &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1         1 Adelie  Torgersen           38.6          21.2               191\n 2         1 Adelie  Dream               42.3          21.2               191\n 3         1 Adelie  Torgersen           37.3          20.5               199\n 4         1 Adelie  Dream               36            18.5               186\n 5         1 Adelie  Dream               41.5          18.5               201\n 6         1 Adelie  Dream               37.8          18.1               193\n 7         1 Adelie  Dream               38.9          18.8               190\n 8         1 Adelie  Dream               35.7          18                 202\n 9         1 Adelie  Dream               37.3          16.8               192\n10         1 Adelie  Dream               41.1          18.1               205\n# ℹ 9,990 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\nmany_chinstrap_samp10\n\n# A tibble: 10,000 × 9\n# Groups:   replicate [1,000]\n   replicate species   island bill_length_mm bill_depth_mm flipper_length_mm\n       &lt;int&gt; &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1         1 Chinstrap Dream            47.6          18.3               195\n 2         1 Chinstrap Dream            45.7          17                 195\n 3         1 Chinstrap Dream            50.9          19.1               196\n 4         1 Chinstrap Dream            50.6          19.4               193\n 5         1 Chinstrap Dream            47.5          16.8               199\n 6         1 Chinstrap Dream            50.5          19.6               201\n 7         1 Chinstrap Dream            42.4          17.3               181\n 8         1 Chinstrap Dream            45.6          19.4               194\n 9         1 Chinstrap Dream            52.7          19.8               197\n10         1 Chinstrap Dream            46.2          17.5               187\n# ℹ 9,990 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\nmany_gentoo_samp10\n\n# A tibble: 10,000 × 9\n# Groups:   replicate [1,000]\n   replicate species island bill_length_mm bill_depth_mm flipper_length_mm\n       &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1         1 Gentoo  Biscoe           43.5          15.2               213\n 2         1 Gentoo  Biscoe           45.2          14.8               212\n 3         1 Gentoo  Biscoe           50            15.3               220\n 4         1 Gentoo  Biscoe           49.6          16                 225\n 5         1 Gentoo  Biscoe           43.6          13.9               217\n 6         1 Gentoo  Biscoe           47.5          15                 218\n 7         1 Gentoo  Biscoe           49.5          16.2               229\n 8         1 Gentoo  Biscoe           45.3          13.8               208\n 9         1 Gentoo  Biscoe           49.8          16.8               230\n10         1 Gentoo  Biscoe           49.1          14.5               212\n# ℹ 9,990 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\nRemember, we only need to use set.seed in situations where we’re trying to compare output from random sampling. You can delete set.seed after you compared your output to mine.\nYou can use the rbind function to combine all three sets of sampling distributions into a single tibble.\n\npenguins_sample_dists &lt;- rbind(many_adelie_samp10, \n                               many_chinstrap_samp10,\n                               many_gentoo_samp10)\n\npenguins_sample_dists\n\n# A tibble: 30,000 × 9\n# Groups:   replicate [1,000]\n   replicate species island    bill_length_mm bill_depth_mm flipper_length_mm\n       &lt;int&gt; &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1         1 Adelie  Torgersen           38.6          21.2               191\n 2         1 Adelie  Dream               42.3          21.2               191\n 3         1 Adelie  Torgersen           37.3          20.5               199\n 4         1 Adelie  Dream               36            18.5               186\n 5         1 Adelie  Dream               41.5          18.5               201\n 6         1 Adelie  Dream               37.8          18.1               193\n 7         1 Adelie  Dream               38.9          18.8               190\n 8         1 Adelie  Dream               35.7          18                 202\n 9         1 Adelie  Dream               37.3          16.8               192\n10         1 Adelie  Dream               41.1          18.1               205\n# ℹ 29,990 more rows\n# ℹ 3 more variables: body_mass_g &lt;int&gt;, sex &lt;fct&gt;, year &lt;int&gt;\n\n\nNow we have a very large set of samples to examine.\n\n\n\n3.2.2 Sample mean \\(\\bar{Y}\\)\nTo look at the distribution of the sample mean, we first need to calculate the sample mean for all 1000 replicates per species. We will use two helpful functions from dplyr to first group the penguins_sample_dists data.frame by species and replicate, and then calculate the mean for each species with the summarize function. Let’s first look at the sampling distribution of the mean of bill length:\n\nbill_length_sample_dists &lt;-  group_by(penguins_sample_dists, species, replicate)\nbill_length_sample_dists &lt;- summarize(bill_length_sample_dists, \n                                      Y_bar = mean(bill_length_mm, na.rm = TRUE))\n\nbill_length_sample_dists\n\n# A tibble: 3,000 × 3\n# Groups:   species [3]\n   species replicate Y_bar\n   &lt;fct&gt;       &lt;int&gt; &lt;dbl&gt;\n 1 Adelie          1  38.6\n 2 Adelie          2  37.0\n 3 Adelie          3  38  \n 4 Adelie          4  38.4\n 5 Adelie          5  39.2\n 6 Adelie          6  39.5\n 7 Adelie          7  39.8\n 8 Adelie          8  39.4\n 9 Adelie          9  40.2\n10 Adelie         10  38.2\n# ℹ 2,990 more rows\n\n\nModify the code above to calculate sample means for flipper_length_mm.\n\n\n3.2.3 Plot the sampling distribution \\(\\bar{Y}\\)\nWe can apply the ggplot() tools we’ve already learned to plot a multiple histogram to compare the sampling distributions in each species.\n\nlibrary(ggplot2)\n\nggplot(bill_length_sample_dists, aes(Y_bar, fill = species)) +\n    geom_histogram(alpha = 0.5, position = \"identity\", bins = 30) +\n    scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nSee if you remember how to use facet_grid() to put each specie in it’s own panel like this:\n\n\n\n\n\n\n\n\n\n\n\n3.2.4 Standard error of the mean\nThe standard error of the mean helps us quantify our uncertainty about our estimate of the population mean given our sample size. We can calculate a hypothetical standard error for the perfect random sample of size \\(n\\) by dividing the population standard deviation by \\(\\sqrt{n}\\): \\(\\sigma / \\sqrt{n}\\). Let’s pretend that the penguins data set is the entire “population”, the population standard deviation for bill_length_mm is:\n\n\n\n\n\nspecies\n\\(\\sigma\\)\n\n\n\n\nAdelie\n2.65\n\n\nChinstrap\n3.29\n\n\nGentoo\n3.06\n\n\n\n\n\nNow calculate the hypothetical standard error of the mean for a sample size of 10. You should get:\n\n\n\n\n\nspecies\n\\(\\sigma\\)\n\\(\\sigma/\\sqrt{n}\\)\n\n\n\n\nAdelie\n2.65\n0.8380036\n\n\nChinstrap\n3.29\n1.0403894\n\n\nGentoo\n3.06\n0.9676570\n\n\n\n\n\nLet’s compare this hypothetical standard error of the mean to what we obtain from our simulations. Remember that the standard error of the mean is simply the standard deviation of the sampling distribution. That means we can get the answer by using the sd() function on our simulated sampling distribution.\n\nbill_length_se &lt;- group_by(bill_length_sample_dists, species)\nbill_length_se &lt;- summarize(bill_length_se, SE_Ybar = sd(Y_bar))\nbill_length_se\n\n# A tibble: 3 × 2\n  species   SE_Ybar\n  &lt;fct&gt;       &lt;dbl&gt;\n1 Adelie      0.841\n2 Chinstrap   1.01 \n3 Gentoo      0.929\n\n\nNotice that we had to first group by Species, then summarize by taking the standard deviation of all of our sample means.\nAre the population standard errors of the mean close to what you calculated from the simulations? Are the standard errors what you expected given the multiple histogram figure above?\n\n\n3.2.5 Sample standard error of the mean\nThe sample standard error (\\(\\mathrm{SE}_{\\bar{Y}}\\)) quantifies our uncertainty in our estimate of the population mean, \\(\\bar{Y}\\). Specifically, \\(\\mathrm{SE}_{\\bar{Y}}\\) is the standard deviation of sampling distribution for \\(\\bar{Y}\\). The equation for the \\(\\mathrm{SE}_{\\bar{Y}}\\) is the sample standard deviation divided by the square-root of the sample size:\n\\[ \\mathrm{SE}_{\\bar{Y}} = \\frac{s}{\\sqrt{n}} \\]\nThere’s no function in R to calculate \\(\\mathrm{SE}_{\\bar{Y}}\\), but you know the functions for sample standard deviation and square-root. Use R to calculate the sample standard error of the mean for the following numbers:\n\n2.16 -0.79 -0.18 1.62 -0.98 -1.15 -0.15 1.34 1.96 1.74\n\nYou should get \\(\\mathrm{SE}_{\\bar{Y}}\\) = 0.42.\n\n\n3.2.6 95% confidence intervals\nConfidence intervals are a way to show the plausible range of parameter values given the data. 95% confidence intervals will include the true population parameter 95% of the time. We’ll learn ways to calculate confidence intervals for different parameters throughout the class. Today, we’ll use the “2 SE” rule to approximate 95% confidence intervals for the sample mean \\(\\bar{Y}\\). The lower bound and upper bounds of the approximate 95% confidence interval using the 2 SE rule are:\n\\[ \\text{lower CI}: \\bar{Y} - 2 \\times \\mathrm{SE}_{\\bar{Y}} \\] \\[ \\text{upper CI}: \\bar{Y} + 2 \\times \\mathrm{SE}_{\\bar{Y}} \\] Use the mean() function and standard error of the mean to calculate the confidence interval for the data you used in the last section. You should get:\n\n\n\n\n\n\\(\\bar{Y}\\)\nLower CI\nUpper CI\n\n\n\n\n0.557\n-0.2813638\n1.395364",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Sampling Distribution</span>"
    ]
  },
  {
    "objectID": "lab03.html#questions",
    "href": "lab03.html#questions",
    "title": "3  The Sampling Distribution",
    "section": "3.3 Questions",
    "text": "3.3 Questions\nAll questions are about the sampling distribution of the sample mean, \\(\\bar{Y}\\)\n\nImport data\nWe’ll use a dataset about leaf sizes from Wright et al. (2017). We’ll pretend that this is population of all leaf sizes in the world and look at the properties of random samples from the population.\nUse the read.csv(), $, [, and/or dplyr functions to\n\nread-in the dataset\nmake a data.frame with only the latitude and leafsize_cm2 columns\nremove all rows with missing values from leafsize_cm2\nsubset the data to only tropical latitudes between -23.43655° and 23.43655°\nassign this data.frame to the name leafsize\n\nHints:\n\nto get ONE column you can use ...$column_name, to get multiple columns, you can use ...[, c(\"column_name1\", \"column_name2\")]\nyou can figure out if a value is missing with the is.na function\nlatitudes between -23.43655° and 23.43655° is the same as abs(latitude) &lt; 23.43655\n\nIf you’ve done everything correctly, you should get the same values for the population mean seen below:\nmean(leafsize$leafsize_cm2)\n[1] 65.97642\nCreate 1000 replicates each of sample sizes of 64, 256, and 1024 from the leafize data.frame you generated in a. I’ll show you the code for \\(n = 64\\), then you should copy and modify it to make similar objects called sample_dist256 and sample_dist1024. Then use rbind() to combine them into an object called sample_dists.\n# create replicate samples\nsample_dist64 &lt;- rep_slice_sample(leafsize, n = 64, reps = 1e3)\n\n# add a column recording the sample size\nsample_dist64$sample_size &lt;- 64\n\n# create replicate samples\nsample_dist256 &lt;- ___\n\n# add a column recording the sample size\n___ &lt;- 256\n\n# create replicate samples\nsample_dist1024 &lt;- ___\n\n# add a column recording the sample size\n___ &lt;- 1024\n\n# combine using `rbind`\nsample_dists &lt;- ___\nUse the group_by() and summarize() functions to calculate the sample mean for each level of sample size (64, 256, or 1024) and replicate. Make sure you assign the output a name so you can use it to make a plot in the next part.\nMake a multi-panel histogram with separate panels for each sample size. It should look something like this, but will not be exactly the same because the simulations are random.\n\nHow does the location and width of the sampling distribution for \\(\\bar{Y}\\) change as \\(n\\) increases?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>The Sampling Distribution</span>"
    ]
  }
]